import os
import pandas as pd
import re
from email import policy
from email.parser import BytesParser
from dateutil import parser
import mailbox

# Function to extract email body
def extract_body(msg):
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))
            if content_type == "text/plain" and "attachment" not in content_disposition:
                return part.get_payload(decode=True).decode(errors="replace")
            elif content_type == "text/html" and "attachment" not in content_disposition:
                return part.get_payload(decode=True).decode(errors="replace")
    else:
        return msg.get_payload(decode=True).decode(errors="replace")
    return ""

# Function to extract attachments
def extract_attachments(msg, output_dir="attachments"):
    attachments = []
    if msg.is_multipart():
        for part in msg.walk():
            content_disposition = str(part.get("Content-Disposition"))
            if "attachment" in content_disposition:
                filename = part.get_filename()
                if filename:
                    attachment_data = part.get_payload(decode=True)
                    filepath = os.path.join(output_dir, filename)
                    with open(filepath, "wb") as f:
                        f.write(attachment_data)
                    attachments.append(filepath)
    return attachments

# Custom function to handle parsing dates, including timezone offsets
def parse_date(date_str):
    try:
        return parser.parse(date_str)
    except (ValueError, TypeError):
        return pd.NaT

# Function to remove illegal characters
def remove_illegal_characters(value):
    if isinstance(value, str):
        ILLEGAL_CHARACTERS_RE = re.compile(r'[\000-\010]|[\013-\014]|[\016-\037]')
        return ILLEGAL_CHARACTERS_RE.sub('', value)
    return value

# Specify the path to your mbox file
mbox_path = '/content/All mail Including Spam and Trash.mbox'

# Open the mbox file
mbox = mailbox.mbox(mbox_path)

# Create an empty list to store email data
emails = []

# Ensure attachments directory exists
os.makedirs("attachments", exist_ok=True)

# Iterate through each message in the mbox file
for message in mbox:
    try:
        msg = BytesParser(policy=policy.default).parsebytes(message.as_bytes())
        # Extract email details
        email_data = {
            'From': remove_illegal_characters(msg['From']),
            'To': remove_illegal_characters(msg['To']),
            'Subject': remove_illegal_characters(msg['Subject']),
            'Date': msg['Date'],
            'Content-Type': msg.get_content_type(),
            'Body': remove_illegal_characters(extract_body(msg)),
            'Attachments': extract_attachments(msg),
            # Determine if the email is sent or received
            'Sent/Received': 'Sent' if msg['To'] else 'Received'
        }
        emails.append(email_data)
    except Exception as e:
        print(f"Error processing message: {e}")

# Convert the list of emails to a DataFrame
df = pd.DataFrame(emails)

# Apply the custom date parsing function
df['Date'] = df['Date'].apply(lambda x: parse_date(x) if isinstance(x, str) else pd.NaT)

# Fill missing dates with a placeholder or context-specific logic
df['Date'] = df['Date'].fillna(pd.Timestamp('1970-01-01'))

# Ensure 'Date' column is properly converted to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Remove timezone information
df['Date'] = df['Date'].dt.tz_localize(None)

# Now safely use .dt accessor after confirming 'Date' is in datetime format
df['DayOfWeek'] = df['Date'].dt.day_name()
df['Month'] = df['Date'].dt.month_name()
df['Year'] = df['Date'].dt.year
df['Hour'] = df['Date'].dt.hour

# Remove illegal characters from all text-based columns
text_columns = ['From', 'To', 'Subject', 'Body']
for col in text_columns:
    df[col] = df[col].apply(remove_illegal_characters)

# Fill missing values for date-related columns
df['Date'] = df['Date'].fillna(method='ffill')
df['DayOfWeek'] = df['Date'].dt.day_name().fillna(method='ffill')
df['Month'] = df['Date'].dt.month_name().fillna(method='ffill')
df['Year'] = df['Date'].dt.year.fillna(method='ffill')
df['Hour'] = df['Date'].dt.hour.fillna(method='ffill')

# Add column to indicate if email is Sent or Received
df['Sent/Received'] = df['To'].notna() & df['To'].str.strip().ne('')
df['Sent/Received'] = df['Sent/Received'].map({True: 'Sent', False: 'Received'})

# Count Sent and Received Emails
sent_emails_count = df[df['Sent/Received'] == 'Sent'].shape[0]
received_emails_count = df[df['Sent/Received'] == 'Received'].shape[0]

print(f"Number of Sent Emails: {sent_emails_count}")
print(f"Number of Received Emails: {received_emails_count}")

# Save the final DataFrame directly to an Excel file
output_path = '/content/sentreceived.xlsx'
df.to_excel(output_path, index=False)

print("The processed email data has been saved to 'sentreceived.xlsx'.")
